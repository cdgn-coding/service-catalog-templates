AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Producto para Desplegar una Función AWS Lambda con Integración Opcional con SQS y actualizaciones a través de S3.

Parameters:
  LambdaFunctionName:
    Type: String
    Description: "Nombre de la función AWS Lambda."

  Runtime:
    Type: String
    Description: "Entorno de ejecución para la función Lambda."
    AllowedValues:
      - nodejs18.x
      - nodejs16.x
      - python3.9
      - python3.8
      - go1.x

  Handler:
    Type: String
    Description: "El manejador de la función Lambda que se ejecutará."
    Default: "index.handler"

  SQSQueueARN:
    Type: String
    Description: "ARN de la cola SQS que desencadenará la función Lambda (opcional)."
    Default: ''

  CodeS3Key:
    Type: String
    Description: "Clave S3 (ruta) para el archivo zip del código Lambda."
    Default: ''

  BatchSize:
    Type: Number
    Description: "Tamaño del lote para procesar mensajes desde SQS."
    Default: 10
    MinValue: 1
    MaxValue: 10000

  MaximumBatchingWindowInSeconds:
    Type: Number
    Description: "Tiempo máximo en segundos para acumular mensajes antes de invocar la Lambda."
    Default: 0
    MinValue: 0
    MaxValue: 300

  Enabled:
    Type: String
    Description: "Habilitar o deshabilitar la integración con SQS."
    AllowedValues:
      - true
      - false
    Default: true

  Timeout:
    Type: Number
    Description: "Tiempo máximo de ejecución de la función Lambda en segundos."
    Default: 25
    MinValue: 1
    MaxValue: 900

  MaximumConcurrency:
    Type: Number
    Description: "Maximum number of concurrent Lambda executions for SQS processing"
    Default: 2
    MinValue: 1
    MaxValue: 1000

  MaximumRetryAttempts:
    Type: Number
    Description: "Maximum number of retry attempts for failed message processing"
    Default: 2
    MinValue: 0
    MaxValue: 185

Conditions:
  HasSQSQueueARN: !Not [ !Equals [ !Ref SQSQueueARN, '' ] ]
  HasCustomS3Key: !Not [ !Equals [ !Ref CodeS3Key, '' ] ]

Resources:
  LambdaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${LambdaFunctionName}-code-bucket-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${LambdaS3Bucket}/*'
        - PolicyName: LambdaSQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !If [HasSQSQueueARN, !Ref SQSQueueARN, '*']

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: !Ref Runtime
      Handler: !Ref Handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          'use strict';

          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));

            for (const record of event.Records) {
              console.log('Message Body:', record.body);
            }

            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Batch processed successfully' })
            };
          };
      Timeout: !Ref Timeout

  SQSQueueEventSourceMapping:
    Condition: HasSQSQueueARN
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref SQSQueueARN
      FunctionName: !Ref LambdaFunction
      BatchSize: !Ref BatchSize
      MaximumBatchingWindowInSeconds: !Ref MaximumBatchingWindowInSeconds
      Enabled: !Ref Enabled
      FunctionResponseTypes:
        - ReportBatchItemFailures
      ScalingConfig:
        MaximumConcurrency: !Ref MaximumConcurrency
      MaximumRetryAttempts: !Ref MaximumRetryAttempts

Outputs:
  LambdaFunctionName:
    Description: "Nombre de la función Lambda."
    Value: !Ref LambdaFunctionName

  LambdaS3BucketName:
    Description: "Nombre del bucket S3 para actualizaciones."
    Value: !Ref LambdaS3Bucket

  LambdaExecutionRoleArn:
    Description: "ARN del rol de ejecución de Lambda."
    Value: !GetAtt LambdaExecutionRole.Arn

  # GitHubActionsConfig:
  #   Description: "Configuración YAML para GitHub Actions"
  #   Value: !Sub |
  #     name: Deploy Lambda Function
      
  #     on:
  #       push:
  #         branches: [ main ]
        
  #     jobs:
  #       deploy:
  #         runs-on: ubuntu-latest
  #         steps:
  #           - uses: actions/checkout@v2
            
  #           - name: Configure AWS credentials
  #             uses: aws-actions/configure-aws-credentials@v1
  #             with:
  #               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #               aws-region: ${AWS::Region}
            
  #           - name: Deploy Lambda
  #             uses: aws-actions/aws-cloudformation-deploy@v1
  #             with:
  #               name: ${LambdaFunctionName}-stack
  #               template: lambda-product-template.yaml
  #               parameter-overrides: >-
  #                 LambdaFunctionName=${LambdaFunctionName},
  #                 Runtime=${Runtime},
  #                 Handler=${Handler},
  #                 SQSQueueARN=${SQSQueueARN},
  #                 BatchSize=${BatchSize},
  #                 MaximumBatchingWindowInSeconds=${MaximumBatchingWindowInSeconds},
  #                 Enabled=${Enabled},
  #                 Timeout=${Timeout}
