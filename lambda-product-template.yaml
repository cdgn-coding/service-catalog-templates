AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Producto para Desplegar una Función AWS Lambda con Integración Opcional con SQS.

Parameters:
  LambdaFunctionName:
    Type: String
    Description: "Nombre de la función AWS Lambda."

  Runtime:
    Type: String
    Description: "Entorno de ejecución para la función Lambda."
    AllowedValues:
      - nodejs18.x
      - nodejs16.x
      - python3.9
      - python3.8
      - go1.x

  Handler:
    Type: String
    Description: "El manejador de la función Lambda que se ejecutará."
    Default: "index.handler"

  SQSQueueARN:
    Type: String
    Description: "ARN de la cola SQS que desencadenará la función Lambda (opcional)."
    Default: ''

  BatchSize:
    Type: Number
    Description: "Tamaño del lote para procesar mensajes desde SQS."
    Default: 10
    MinValue: 1
    MaxValue: 10000

  MaximumBatchingWindowInSeconds:
    Type: Number
    Description: "Tiempo máximo en segundos para acumular mensajes antes de invocar la Lambda."
    Default: 0
    MinValue: 0
    MaxValue: 300

  Enabled:
    Type: String
    Description: "Habilitar o deshabilitar la integración con SQS."
    AllowedValues:
      - true
      - false
    Default: true

Conditions:
  HasSQSQueueARN: !Not [ !Equals [ !Ref SQSQueueARN, '' ] ]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: '*'
        - PolicyName: LambdaSQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                Resource: !If [HasSQSQueueARN, !Ref SQSQueueARN, '*']

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Runtime: !Ref Runtime
      Handler: !Ref Handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          'use strict';

          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));

            for (const record of event.Records) {
              console.log('Message Body:', record.body);
            }

            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Batch processed successfully' })
            };
          };

  SQSQueueEventSourceMapping:
    Condition: HasSQSQueueARN
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref SQSQueueARN
      FunctionName: !Ref LambdaFunction
      BatchSize: !Ref BatchSize
      MaximumBatchingWindowInSeconds: !Ref MaximumBatchingWindowInSeconds
      Enabled: !Ref Enabled
      FunctionResponseTypes:
        - ReportBatchItemFailures

Outputs:
  LambdaFunctionName:
    Description: "Nombre de la función Lambda."
    Value: !Ref LambdaFunctionName

  LambdaExecutionRoleArn:
    Description: "ARN del rol de ejecución de Lambda."
    Value: !GetAtt LambdaExecutionRole.Arn
